[{"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/reportWebVitals.js":"1","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/App.js":"2","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Auth/Register.js":"3","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/Chat.js":"4","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/index.js":"5","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Auth/Login.js":"6","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/services/authService.js":"7","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/services/api.js":"8","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/reducers/chat.js":"9","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/reducers/auth.js":"10","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/actions/auth.js":"11","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/reducers/index.js":"12","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/index.js":"13","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/actions/chat.js":"14","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Router/ProtectedRoute.js":"15","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/Navbar/Navbar.js":"16","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/types/index.js":"17","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Modal/Modal.js":"18","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/services/chatService.js":"19","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/FriendList/FriendList.js":"20","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/Messenger/Messenger.js":"21","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/Friend/Friend.js":"22","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/utils/helpers.js":"23","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/ChatHeader/ChatHeader.js":"24","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/MessageBox/MessageBox.js":"25","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/MessageInput/MessageInput.js":"26","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/Message/Message.js":"27","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/hooks/socketConnect.js":"28"},{"size":362,"mtime":1611585296244,"results":"29","hashOfConfig":"30"},{"size":1298,"mtime":1612557508449,"results":"31","hashOfConfig":"30"},{"size":2851,"mtime":1611847183367,"results":"32","hashOfConfig":"30"},{"size":718,"mtime":1612557508450,"results":"33","hashOfConfig":"30"},{"size":622,"mtime":1612557508452,"results":"34","hashOfConfig":"30"},{"size":1729,"mtime":1612557508449,"results":"35","hashOfConfig":"30"},{"size":1545,"mtime":1612557508454,"results":"36","hashOfConfig":"30"},{"size":863,"mtime":1614181188509,"results":"37","hashOfConfig":"30"},{"size":7963,"mtime":1612557508457,"results":"38","hashOfConfig":"30"},{"size":1322,"mtime":1612557508456,"results":"39","hashOfConfig":"30"},{"size":1017,"mtime":1612557508455,"results":"40","hashOfConfig":"30"},{"size":171,"mtime":1611720596940,"results":"41","hashOfConfig":"30"},{"size":482,"mtime":1612557508456,"results":"42","hashOfConfig":"30"},{"size":3085,"mtime":1612017253182,"results":"43","hashOfConfig":"30"},{"size":658,"mtime":1611847794137,"results":"44","hashOfConfig":"30"},{"size":4983,"mtime":1611977599737,"results":"45","hashOfConfig":"30"},{"size":141,"mtime":1612185569633,"results":"46","hashOfConfig":"30"},{"size":1560,"mtime":1612142602744,"results":"47","hashOfConfig":"30"},{"size":1932,"mtime":1612557508455,"results":"48","hashOfConfig":"30"},{"size":2723,"mtime":1612142527977,"results":"49","hashOfConfig":"30"},{"size":928,"mtime":1612144277968,"results":"50","hashOfConfig":"30"},{"size":1411,"mtime":1612129337949,"results":"51","hashOfConfig":"30"},{"size":96,"mtime":1612185582936,"results":"52","hashOfConfig":"30"},{"size":3847,"mtime":1612557508450,"results":"53","hashOfConfig":"30"},{"size":2862,"mtime":1612185951115,"results":"54","hashOfConfig":"30"},{"size":6194,"mtime":1612557508451,"results":"55","hashOfConfig":"30"},{"size":965,"mtime":1612137255034,"results":"56","hashOfConfig":"30"},{"size":1939,"mtime":1614180420575,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"a00dkb",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"108"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/reportWebVitals.js",[],["125","126"],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/App.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Auth/Register.js",["127"],"import React, {useState} from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { useDispatch } from 'react-redux'\nimport {register} from '../../store/actions/auth'\n\nimport \"./Auth.scss\";\nimport LoginImage from \"../../assets/images/undraw_barbecue_3x93.svg\";\n\nconst Register = ({history}) => {\n\n  const dispatch = useDispatch()\n\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [email, setEmail] = useState('')\n  const [gender, setGender] = useState('female')\n  const [password, setPassword] = useState('')\n\n  const submitForm = e => {\n    e.preventDefault()\n    dispatch(register({firstName, lastName, email, gender, password}, history))\n  }\n  \n\n  return (\n    <div id=\"auth-container\">\n    <div id=\"auth-card\">\n      <div>\n        <div id=\"image-section\">\n          <img src={LoginImage} alt=\"Login image\" />\n        </div>\n        <div id=\"form-section\">\n          <h2>Create an account</h2>\n\n          <form onSubmit={submitForm}>\n            <div className=\"input-field mb-2\">\n                <input\n                  onChange={e => setFirstName(e.target.value)}\n                  value={firstName}\n                  required='required'\n                  placeholder=\"FIRST NAME\"\n                  type=\"text\"\n                  />\n            </div>\n            <div className=\"input-field mb-2\">\n                <input\n                  onChange={e => setLastName(e.target.value)}\n                  value={lastName}\n                  required='required'\n                  type=\"text\"\n                  placeholder=\"LAST NAME\" \n                  />\n            </div>\n            <div className=\"input-field mb-1\">\n                <input\n                  onChange={e => setEmail(e.target.value)}\n                  value={email}\n                  required='required'\n                  type=\"text\"\n                  placeholder=\"EMAIL\" />\n            </div>\n            <div className=\"input-field mb-2\">\n                <select\n                onChange={e => setGender(e.target.value)}\n                value={gender}\n                required='required'\n                >\n                  <option value=\"male\">MALE</option>\n                  <option value=\"female\">FEMALE</option>\n                  <option value=\"other\">OTHER</option>\n            </select>\n            </div>\n            <div className=\"input-field mb-2\">\n                <input\n                  onChange={e => setPassword(e.target.value)}\n                  value={password}\n                  required='required'\n                  type=\"text\"\n                  placeholder=\"PASSWORD\" />\n            </div>\n            <button>Register</button>\n          </form>\n\n          <p>Already have an account? <Link to=\"/login\"> Login</Link></p>\n        </div>\n      </div>\n    </div>\n  </div>\n  )\n}\n\nexport default Register\n",["128","129"],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/Chat.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/index.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Auth/Login.js",["130"],"import React, {useState} from \"react\";\nimport { Link } from 'react-router-dom'\n// import authService from '../../services/authService'\nimport \"./Auth.scss\";\nimport LoginImage from \"../../assets/images/undraw_barbecue_3x93.svg\";\n\nimport {login} from '../../store/actions/auth'\nimport { useDispatch } from 'react-redux'\n\n\nconst Login = ({history}) => {\n\n  const dispatch = useDispatch()\n\n  const [email, setEmail] = useState('sarah@gmail.com')\n  const [password, setPassword] = useState('secret2')\n\nconst submitForm = e => {\n  e.preventDefault()\n  dispatch(login({email, password}, history))\n}\n\n  return (\n    <div id=\"auth-container\">\n      <div id=\"auth-card\">\n        <div>\n          <div id=\"image-section\">\n            <img src={LoginImage} alt=\"Login image\" />\n          </div>\n          <div id=\"form-section\">\n            <h2>Welcome back</h2>\n\n            <form onSubmit={submitForm}>\n              <div className=\"input-field mb-1\">\n                <input\n                  onChange={e => setEmail(e.target.value)}\n                  value={email}\n                  required='required'\n                  type=\"text\"\n                  placeholder=\"EMAIL\" />\n              </div>\n              <div className=\"input-field mb-2\">\n                <input\n                  onChange={e => setPassword(e.target.value)}\n                  type=\"text\"\n                  placeholder=\"PASSWORD\"\n                  value={password}\n                  required='required'\n                />\n              </div>\n              <button>Login</button>\n            </form>\n\n            <p>don't have an account ? <Link to=\"/register\"> Register</Link></p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/services/authService.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/services/api.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/reducers/chat.js",[],["131","132"],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/reducers/auth.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/actions/auth.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/reducers/index.js",[],["133","134"],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/index.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/actions/chat.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Router/ProtectedRoute.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/Navbar/Navbar.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/store/types/index.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Modal/Modal.js",["135"],"import React from 'react'\nimport './Modal.scss'\n\nconst Modal = (props) => {\n  // Elements in the modal are passed along as children since there is an opening and closing component\n  // All these children have a key associated with them so you can write a function that return the element with that key \n  // This allows for complete flexibility if we want to add more Ui elements or rearrange what we have without affecting the structure\n  const findByKey = (name) => \n    props.children.map(child => {\n      if (child.key === name) return child\n    })\n  \n  const closeModal = (e) => {\n    // we need to stop the propagation to avoid the event bubbling up from the profile drop down\n    e.stopPropagation()\n\n    if (e.target.classList.contains('modal-close')) {\n      // Click function is a simple function defined in nav that flipped the state of the modal\n      return props.click()\n    }\n  }\n\n\n  return (\n    <div\n      className=\"modal-mask modal-close\"\n      onClick={closeModal}\n    >\n      <div className=\"modal-wrapper\">\n        <div className=\"modal-container\">\n          <div className=\"modal-header\">\n            {findByKey('header')}\n          </div>\n          <div className=\"modal-body\">\n            {findByKey('body')}\n          </div>\n\n          <div className=\"modal-footer\">\n            <button\n              className=\"modal-close\"\n              onClick={closeModal}\n            >\n              CLOSE\n            </button>\n            {findByKey('footer')}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Modal\n","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/services/chatService.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/FriendList/FriendList.js",[],["136","137"],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/Messenger/Messenger.js",[],["138","139"],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/Friend/Friend.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/utils/helpers.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/ChatHeader/ChatHeader.js",["140","141","142","143","144"],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/MessageBox/MessageBox.js",["145"],"import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { paginateMessages } from \"../../../../store/actions/chat\";\nimport Message from \"../Message/Message\";\nimport \"./MessageBox.scss\";\n\nconst MessageBox = ({ chat }) => {\n\n  const dispatch = useDispatch()\n\n  const user = useSelector((state) => state.authReducer.user);\n  const scrollBottom = useSelector((state) => state.chatReducer.scrollBottom);\n  const senderTyping = useSelector((state) => state.chatReducer.senderTyping);\n\n  const [loading, setLoading] = useState(false)\n  const [scrollUp, setScrollUp] = useState(0)\n\n  const msgBox = useRef();\n\n  const scrollManual = (value) => {\n    msgBox.current.scrollTop = value\n  }\n\n  const handleInfiniteScroll = (e) => {\n    if (e.target.scrollTop === 0) {\n\n      setLoading(true)\n      const pagination = chat.Pagination\n      const page = typeof pagination === 'undefined' ? 1 : pagination.page\n\n      dispatch(paginateMessages(chat.id, parseInt(page) + 1))\n        .then(res => {\n          if (res) {\n            setScrollUp(scrollUp + 1)\n          }\n          setLoading(false)\n        }).catch(err => {\n          setLoading(false)\n        })\n    }\n  }\n\n  useEffect(() => {\n    setTimeout(() => {\n      // only scroll 10% from the bottom\n      scrollManual(Math.ceil(msgBox.current.scrollHeight * 0.10))\n    }, 100)\n  }, [scrollUp])\n\n  // listening for whenever sender typing changes\n  useEffect(() => {\n    if (senderTyping.typing && msgBox.current.scrollTop > msgBox.current.scrollHeight * 0.30) {\n      setTimeout(() => {\n        scrollManual(msgBox.current.scrollHeight)\n      }, 100)\n    }\n  }, [senderTyping])\n\n  useEffect(() => {\n    if (!senderTyping.typing) {\n      setTimeout(() => {\n        scrollManual(msgBox.current.scrollHeight)\n      }, 100)\n    }\n  }, [scrollBottom])\n\n  return (\n    // registering our useRef hook\n    <div onScroll={handleInfiniteScroll} className=\"msg-box\" id=\"msg-box\" ref={msgBox}>\n      {\n        loading\n          ? <p className=\"loader m-0\">\n            <FontAwesomeIcon icon=\"spinner\" className=\"fa-spin\" />\n        </p>\n            : null\n      }\n      {chat.Messages.map((message, idx) => {\n        return (\n          <Message\n            user={user}\n            chat={chat}\n            message={message}\n            index={idx}\n            key={message.id}\n          />\n        );\n      })}\n      {senderTyping.typing && senderTyping.chatId === chat.id ? (\n        <div className=\"message mt-5p\">\n          <div className=\"other-person\">\n            <p className=\"m-0\">\n              {senderTyping.fromUser.firstName} {senderTyping.fromUser.lastName}\n              ...\n            </p>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default MessageBox;\n","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/MessageInput/MessageInput.js",["146"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ChatService from \"../../../../services/chatService\";\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport \"./MessageInput.scss\";\nimport { incrementScroll } from \"../../../../store/actions/chat\";\n\nconst MessageInput = ({ chat }) => {\n  const dispatch = useDispatch();\n  const user = useSelector((state) => state.authReducer.user);\n  const socket = useSelector((state) => state.chatReducer.socket);\n  // const chatReducer = useSelector(state => state.chatReducer)\n  const newMessage = useSelector((state) => state.chatReducer.newMessage);\n  const [message, setMessage] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [showNewMessageNotification, setShowNewMessageNotification] = useState(\n    false\n  );\n\n  // console.log(socket, 'cocket')\n  // console.log(chat, 'chat')\n  // console.log(message, 'message')\n\n  const fileUpload = useRef();\n  const msgInput = useRef();\n\n\n  const handleMessage = (e) => {\n    const value = e.target.value;\n    // Show that you are typing something\n    setMessage(value);\n\n    const receiver = {\n      chatId: chat.id,\n      fromUser: user,\n      toUserId: chat.Users.map((user) => user.id),\n    };\n\n    // Just evaluate when the user starts typing and keep it as 1 or 0 depending on if the user is typing because we don't want to evaluate every key stroke\n    if (value.length === 1) {\n      receiver.typing = true;\n      socket.emit(\"typing\", receiver);\n    }\n    if (value.length === 0) {\n      receiver.typing = false; // so we can stop the bubble\n      socket.emit(\"typing\", receiver);\n    }\n\n    // Notify other users that this user is typing\n  };\n\n  const handleKeyDown = (e, imageUpload) => {\n    if (e.key === \"Enter\") {\n      sendMessage(imageUpload);\n    } \n  };\n\n  const sendMessage = (imageUpload) => {\n    if (message.length < 1 && !imageUpload) return;\n    \n    const msg = {\n      type: imageUpload ? \"image\" : \"text\",\n      fromUser: user,\n      toUserId: chat.Users.map((user) => user.id),\n      chatId: chat.id,\n      message: imageUpload ? imageUpload : message,\n    };\n\n    setMessage(\"\");\n    setImage(\"\");\n    setShowEmojiPicker(false);\n\n    // send message with socket\n    socket.emit(\"message\", msg);\n  };\n\n  const handleImageUpload = () => {\n    const formData = new FormData();\n    formData.append(\"id\", chat.id);\n    formData.append(\"image\", image);\n\n    ChatService.uploadImage(formData)\n      .then((image) => {\n        sendMessage(image);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const selectEmoji = (emoji) => {\n    // this function merges the selected emoji along with the rest of the image\n    const startPosition = msgInput.current.selectionStart;\n    const endPosition = msgInput.current.selectionEnd;\n    const emojiLength = emoji.native.length;\n    const value = msgInput.current.value;\n    // Setting the message in state with each sub string either side of the added emoji\n    setMessage(\n      value.substring(0, startPosition) +\n        emoji.native +\n        value.substring(endPosition, value.length)\n    );\n    msgInput.current.focus();\n    // Set a cursor to the end of the input\n    msgInput.current.selectionEnd = endPosition + emojiLength;\n  };\n\n  useEffect(() => {\n    // Since message input is not a parent of msg-box we have to use the only way of selecting this element - because we can't just pass the reference\n    const msgBox = document.getElementById(\"msg-box\");\n    if (\n      !newMessage.seen &&\n      newMessage.chatId === chat.id &&\n      msgBox.scrollHeight !== msgBox.clientHeight\n    ) {\n      if (msgBox.scrollTop > msgBox.scrollHeight * 0.3) {\n        dispatch(incrementScroll());\n      } else {\n        setShowNewMessageNotification(true);\n      }\n    } else {\n      setShowNewMessageNotification(false);\n    }\n  }, [newMessage, dispatch]);\n\n  const showNewMessage = () => {\n    dispatch(incrementScroll());\n    setShowNewMessageNotification(false);\n  };\n\n  return (\n    <div className=\"input-container\">\n      <div className=\"image-upload-container\">\n        <div>\n          {showNewMessageNotification ? (\n            <div className=\"message-notification\" onClick={showNewMessage}>\n              <FontAwesomeIcon icon=\"bell\" className=\"fa-icon\" />\n              <div className=\"m-0\">new message</div>\n            </div>\n          ) : null}\n        </div>\n        <div className=\"image-upload\">\n          {image.name ? (\n            <div className=\"image-details\">\n              <p className=\"m-0\">{image.name}</p>\n              <FontAwesomeIcon\n                onClick={handleImageUpload}\n                icon=\"upload\"\n                className=\"fa-icon\"\n              />\n              <FontAwesomeIcon\n                onClick={() => setImage(\"\")}\n                icon=\"times\"\n                className=\"fa-icon\"\n              />\n            </div>\n          ) : null}\n          <FontAwesomeIcon\n            onClick={() => fileUpload.current.click()}\n            icon={[\"far\", \"image\"]}\n            className=\"fa-icon\"\n          />\n        </div>\n      </div>\n      <div className=\"message-input\">\n        <input\n          ref={msgInput}\n          value={message}\n          onChange={(e) => handleMessage(e)}\n          onKeyDown={(e) => handleKeyDown(e, false)}\n          placeholder=\"Message... \"\n          type=\"text\"\n        />\n\n        <FontAwesomeIcon\n          onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n          icon={[\"far\", \"smile\"]}\n          className=\"fa-icon\"\n        />\n      </div>\n      <input\n        ref={fileUpload}\n        className=\"chat-image\"\n        id='chat-image'\n        type=\"file\"\n        onChange={(e) => setImage(e.target.files[0])}\n      />\n\n      {showEmojiPicker ? (\n        <Picker\n          title=\"Pick your emoji...\"\n          emoji=\"point_up\"\n          style={{ position: \"absolute\", bottom: \"20px\", right: \"20px\" }}\n          onSelect={selectEmoji}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default MessageInput;\n","/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/components/Message/Message.js",[],"/Users/Kahil/Desktop/codeProjects/chat_app_websockets/client/src/components/Chat/hooks/socketConnect.js",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":31,"column":11,"nodeType":"153","endLine":31,"endColumn":53},{"ruleId":"147","replacedBy":"154"},{"ruleId":"149","replacedBy":"155"},{"ruleId":"151","severity":1,"message":"152","line":28,"column":13,"nodeType":"153","endLine":28,"endColumn":55},{"ruleId":"147","replacedBy":"156"},{"ruleId":"149","replacedBy":"157"},{"ruleId":"147","replacedBy":"158"},{"ruleId":"149","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":9,"column":30,"nodeType":"162","messageId":"163","endLine":9,"endColumn":32},{"ruleId":"147","replacedBy":"164"},{"ruleId":"149","replacedBy":"165"},{"ruleId":"147","replacedBy":"166"},{"ruleId":"149","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":12,"column":10,"nodeType":"170","messageId":"171","endLine":12,"endColumn":28},{"ruleId":"168","severity":1,"message":"172","line":12,"column":30,"nodeType":"170","messageId":"171","endLine":12,"endColumn":51},{"ruleId":"168","severity":1,"message":"173","line":13,"column":10,"nodeType":"170","messageId":"171","endLine":13,"endColumn":29},{"ruleId":"168","severity":1,"message":"174","line":13,"column":31,"nodeType":"170","messageId":"171","endLine":13,"endColumn":53},{"ruleId":"168","severity":1,"message":"175","line":39,"column":9,"nodeType":"170","messageId":"171","endLine":39,"endColumn":19},{"ruleId":"176","severity":1,"message":"177","line":66,"column":6,"nodeType":"178","endLine":66,"endColumn":20,"suggestions":"179"},{"ruleId":"176","severity":1,"message":"180","line":125,"column":6,"nodeType":"178","endLine":125,"endColumn":28,"suggestions":"181"},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["182"],["183"],["182"],["183"],["182"],["183"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["182"],["183"],["182"],["183"],"no-unused-vars","'showLeaveChatModal' is assigned a value but never used.","Identifier","unusedVar","'setShowLeaveChatModal' is assigned a value but never used.","'showDeleteChatModal' is assigned a value but never used.","'setShowDeleteChatModal' is assigned a value but never used.","'deleteChat' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'senderTyping.typing'. Either include it or remove the dependency array.","ArrayExpression",["184"],"React Hook useEffect has a missing dependency: 'chat.id'. Either include it or remove the dependency array.",["185"],"no-global-assign","no-unsafe-negation",{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [scrollBottom, senderTyping.typing]",{"range":"190","text":"191"},"Update the dependencies array to be: [newMessage, dispatch, chat.id]",{"range":"192","text":"193"},[1905,1919],"[scrollBottom, senderTyping.typing]",[4033,4055],"[newMessage, dispatch, chat.id]"]